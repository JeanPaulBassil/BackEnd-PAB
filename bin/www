#!/usr/bin/env node

// Import dependencies:
// 'app' from the app.js file in the parent directory, which is an Express.js app
let app = require('../app');

// Node.js debugging utility 
let debug = require('debug')('backend:server');

// module to create an HTTP server
let http = require('http');

// Normalize the port to use (either from an environment variable or default to 3000)
// The 'normalizePort' function is defined later in this file
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);  // set the port for the app to use

// Create the HTTP server with the 'app'
var server = http.createServer(app);

// Start the server listening on the port
server.listen(port);

// Add event listeners for the 'error' and 'listening' events
// The 'onError' and 'onListening' functions are defined later in this file
server.on('error', onError);
server.on('listening', onListening);

// Function to normalize a port into a number, string, or false
function normalizePort(val) {
  var port = parseInt(val, 10);  // try to convert the port value to a number

  // If the port is not a number (isNaN), then return it as is
  if (isNaN(port)) {
    return val;
  }

  // If the port is a number and it's not negative, then return it as is
  if (port >= 0) {
    return port;
  }

  // Otherwise, return false
  return false;
}

// Event listener for the 'error' event
function onError(error) {
  // If the error was not caused by listening on a port, throw the error
  if (error.syscall !== 'listen') {
    throw error;
  }

  // If the port is a string, prepend it with 'Pipe', otherwise prepend it with 'Port'
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);  // exit the process with a failure code (1)
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);  // exit the process with a failure code (1)
      break;
    default:
      throw error;  // otherwise, throw the error
  }
}

// Event listener for the 'listening' event
function onListening() {
  // Get the address (either a string or an object with 'port', 'family', and 'address') the server is listening on
  var addr = server.address();

  // If the address is a string, prepend it with 'pipe', otherwise prepend it with 'port'
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  // Log to the debug output that the server is listening
  debug('Listening on ' + bind);

  // Also log to the console that the server is listening
  console.log("server is listening on port", port)
}
